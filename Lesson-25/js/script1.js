// –ó–∞–¥–∞—á–∞ 1. –î–∞–Ω–æ –∫–ª–∞—Å PhoneNumber. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ string, –ø—Ä–∏ —è–∫–æ–º—É <br>
// –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–º–µ—Ä–∞ –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä (050‚Ä¶.  ü°™ MTC, 096‚Ä¶ ü°™ Kyivstar, ‚Ä¶.)
class PhoneNumber {
	constructor(userPhoneNumber){
		this.userPhoneNumber = userPhoneNumber
	}
	getOperatorCode(userPhoneNumber){
userPhoneNumber = this.userPhoneNumber
return this.userPhoneNumber.substr(0, 3)
	}
	[Symbol.toPrimitive](hint){
		hint = this.getOperatorCode()
		let res
		switch (hint) {
			case '050' :
				res = 'MTC'
				break;
				case '063' :
        res = 'lifecell'
				break;
				case '068' :	
				res = 'Kiyvstar'
				break;
			default: 
			throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Äa')
		}
	return res

	}
}
let phoneNumber = new PhoneNumber('0638936558')
console.log('–û–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ü—å–æ–≥–æ –Ω–æ–º–µ—Ä—É:  ' + phoneNumber);

